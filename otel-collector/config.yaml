apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-config
data:
  config.yaml: |
    receivers:
      otlp:
        protocols:
          http:
            endpoint: "0.0.0.0:4318"
          grpc:
            endpoint: "0.0.0.0:4317"
      filelog:
        start_at: beginning
        include:
        - "/var/log/app.log"
        operators:
          - type: json_parser
            parse_to: body
            timestamp:
              parse_from: body.timestamp
              layout: '%Y-%m-%dT%H:%M:%S.%fZ'
            severity:
              parse_from: body.severity
              preset: none
              mapping:
                debug: debug
                info: info
                info3: notice
                warn: warning
                error: error
                fatal: critical
                fatal3: alert
                fatal4: emergency
          - type: add
            field: body.trace_flags
            value: "01"
            if: body["logging.googleapis.com/trace_sampled"] == true
          - type: regex_parser
            parse_from: body["logging.googleapis.com/trace"]
            parse_to: body
            regex: (?P<trace_id>.*)
            trace:
              span_id:
                parse_from: body["logging.googleapis.com/spanId"]
          - type: remove
            field: body.timestamp
          - type: remove
            field: body.trace_id
          - type: remove
            field: body.trace_flags
          - type: remove
            field: body.severity
          - type: remove
            field: body["logging.googleapis.com/trace"]
          - type: remove
            field: body["logging.googleapis.com/spanId"]
          - type: remove
            field: body["logging.googleapis.com/trace_sampled"]

    exporters:
      debug:
        verbosity: detailed

    processors:
      batch:
        send_batch_max_size: 500
        send_batch_size: 500
        timeout: 1s
      resource:
        attributes:
          - { key: "cloud.region", value: "us-central1", action: "insert" }
          - { key: "k8s.cluster.name", value: "no-cluster", action: "insert" }
          - { key: "k8s.namespace.name", value: "no-namespace", action: "insert" }
          - { key: "service.name", value: "us-job", action: "insert" }
          - { key: "service.instance.id", value: "us-instance", action: "insert" }
      resourcedetection:
        detectors: ["env", "gcp"]

    service:
      telemetry:
        metrics:
          readers:
            - pull:
                exporter:
                  prometheus:
                    host: '0.0.0.0'
                    port: 8888
      pipelines:
        traces:
          receivers: ["otlp"]
          processors: ["batch", "resourcedetection"]
          exporters: ["debug"]
        metrics:
          receivers: ["otlp"]
          processors: ["batch", "resourcedetection", "resource"]
          exporters: ["debug"]
        logs:
          receivers: ["filelog"]
          processors: ["batch", "resourcedetection"]
          exporters: ["debug"]